<Styles xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Trimmed.Controls;assembly=Mechanism.AvaloniaUI.Trimmed"
             xmlns:meconv="clr-namespace:Mechanism.AvaloniaUI.Trimmed.Converters;assembly=Mechanism.AvaloniaUI.Trimmed"
             xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Trimmed.Core;assembly=Mechanism.AvaloniaUI.Trimmed">
  <Style Selector="mectrl|FlyoutButton">
    <!--
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderLowBrush}"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
    <Setter Property="Padding" Value="4"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>-->
    <Setter Property="Template">
      <ControlTemplate>
        <Panel x:Name="PART_ButtonArea">
          <Border
            x:Name="BackgroundBorder" 
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="5">
            <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Path Data="M 0 0 L 4 4 L 8 0 Z" Margin="4,0" Fill="{TemplateBinding Foreground}" DockPanel.Dock="Right" VerticalAlignment="Center"/>
              <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <ContentPresenter Name="IconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" DockPanel.Dock="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <Rectangle Name="IconGapRect" DockPanel.Dock="Left">
                  <Rectangle.IsVisible>
                    <MultiBinding ConverterParameter="All">
                      <MultiBinding.Converter>
                        <meconv:BoolsToBoolConverter/>
                      </MultiBinding.Converter>
                      <MultiBinding.Bindings>
                        <Binding Path="Content" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                        <Binding Path="(mecore:AttachedIcon.Icon)" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                      </MultiBinding.Bindings>
                    </MultiBinding>
                  </Rectangle.IsVisible>
                </Rectangle>
                <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </DockPanel>
            </DockPanel>
          </Border>
          <Popup x:Name="PART_Flyout" IsOpen="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" StaysOpen="False" MinWidth="1" MinHeight="1" PlacementMode="Bottom" PlacementTarget="{Binding #BackgroundBorder}">
            <ContentPresenter Name="PART_FlyoutContentPresenter" Background="{DynamicResource ThemeBackgroundBrush}" BorderBrush="{DynamicResource ThemeBorderMidBrush}" BorderThickness="{DynamicResource ThemeBorderThickness}" ContentTemplate="{TemplateBinding FlyoutContentTemplate}" Content="{TemplateBinding FlyoutContent}" TextBlock.Foreground="{DynamicResource ThemeForegroundBrush}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
          </Popup>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <!--
  <Style Selector="mectrl|FlyoutButton /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:not(:pointerover):not(:pressed):not(:checked) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:checked /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:pointerover Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:pressed Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:disabled Border#BackgroundBorder">
    <Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}"/>
  </Style>-->
</Styles>